version: 2.1

orbs:
  win: circleci/windows@2.2.0
  #linux: cloudesire/openjdk-install@1.2.3

commands:
  install-conda:
    steps:
      - run:
          name: Installing Miniconda
          command: |
            MINICONDA_FILE="Miniconda3-latest-Linux-x86_64.sh"
            curl -sSL -O "https://repo.continuum.io/miniconda/${MINICONDA_FILE}"
            bash "${MINICONDA_FILE}" -b -p ~/miniconda3
            rm -rf "${MINICONDA_FILE}"
            eval "$(~/miniconda3/bin/conda shell.bash hook)"
            conda init
  setup-env:
    parameters:
      os:
        type: enum
        default: "linux"
        enum: ["linux", "win"]
    steps:
      - restore_cache:
          key: conda-{{ arch }}-{{ checksum "env.yml" }}
      - when:
          condition:
            equal: [ "linux", << parameters.os >> ]
          steps:
            - run:
                name: Installing libXrender
                command: |
                  sudo apt-get update
                  sudo apt-get install libxrender1
            - run: 
                name: Setting up environment
                command: |
                  eval "$(~/miniconda3/bin/conda shell.bash hook)"
                  conda env create -f env.yml
      - when:
          condition:
            equal: [ "win", << parameters.os >> ]
          steps:
            - run:
                name: Setting up environment
                command: |
                  conda init powershell
                  conda env create -f env.yml
      - save_cache:
          key: conda-{{ arch }}-{{ checksum "env.yml" }}
          paths:
            - ~/miniconda
  test:
    parameters:
      os:
        type: enum
        default: "linux"
        enum: ["linux", "win"]
    steps:
      - when:
          condition:
            equal: [ "linux", << parameters.os >> ]
          steps:
            - run:
                name: Running tests
                command: |
                  eval "$(~/miniconda3/bin/conda shell.bash hook)"
                  conda activate test
                  python -m pytest --disable-warnings
                  python -m flake8 --max-line-length=120 --ignore=PT009,E203,W503,W601
      - when:
          condition:
            equal: [ "win", << parameters.os >> ]
          steps:
            - run: 
                name: Running tests
                command: |
                  Set-StrictMode -Version Latest
                  $ErrorActionPreference = 'Stop'
                  function ThrowOnFailure($Msg) { if (-not $?) { throw $Msg } }
                  conda activate test
                  python -m pytest --disable-warnings
                  ThrowOnFailure "Python test failed!"
                  python -m flake8 --max-line-length=120 --ignore=PT009,E203,W503,W601

jobs:
  build_and_test_linux:
    docker:
      - image: cimg/python:3.11.0
    steps:
      - checkout # checkout source code to working directory
      - run:
          command: | # create whl and use pipenv to install dependencies
            python3 setup.py sdist bdist_wheel
            sudo add-apt-repository universe -y
            sudo apt-get update
            sudo apt install -y python3-pip
            sudo pip install pipenv
            pipenv install dist/convsn-0.0.3-py3-none-any.whl
            pipenv install pytest
      - run:
          command: | # Run test suite
            pipenv run pytest
    
  unittest:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-conda
      - setup-env
      - test
  win-unittest:
    executor: win/default
    steps:
      - checkout
      - setup-env:
          os: win
      - test:
          os: win

  # Linux integration 
  Integration-on-linux:
    executor: python/default
    steps:
      - checkout
      - run:
          name: Install Python dependencies and postgresql installation
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            sudo apt install -y postgresql-client || true
            sudo apt install postgresql

      - run:
          name: Integrate IsaTAB.sql into the database
          command: |
            psql -c "create database Isatab_DB" -U postgres -h localhost -p 5432
            psql -f AutoFlow-OmicsDataHandling/IsaTab.sql Isatab_DB

  # Windows integration
  Integration-on-windows:
    executor:
      name: win/default
      shell: powershell.exe

    steps:
      - checkout
      - run:
          name: Install postgresql
          command : |
            choco install postgresql
            python -m pip install -U pip

      - run:
          name: Install Python Dependencies
          command : |
            pip install -r requirements.txt

      - run:
          name : Integrate IsaTAB.sql into the database
          command: |
            psql -c "create database Isatab_DB" -U postgres -h localhost -p 5432
            psql -h localhost -U biosustain -d biosustaindb -f AutoFlow-OmicsDataHandling/IsaTab.sql
              
  # MacOS integration
  Integration-on-macos:
    macos:
      xcode: 11.3.0
    steps:
      - checkout
      - run:
          name: Install PostgresSQL

          environment:
            POSTGRES_USER: circleCI
            POSTGRES_DB: circleCI_test

          command: |
            brew install postgresql

      - run:
          name: Integrate IsaTAB.sql into the database
          command: |
            psql -c "create database Isatab_DB" -U postgres -h localhost -p 5432
            psql -f AutoFlow-OmicsDataHandling/IsaTab.sql Isatab_DB

workflows:
  main:
    jobs:
      - build_and_test_linux
      # - unittest
      # - win-unittest
      #- Integration-on-linux
      #- Integration-on-windows
      #- Integration-on-macos
